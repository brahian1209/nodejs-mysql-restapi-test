{"version":3,"sources":["Login.controller.js"],"names":["_index","require","getUsuarios","req","res","pool","_result","regeneratorRuntime","async","_context","prev","next","awrap","getConnection","sent","request","query","querys","getAllUsuarios","result","json","recordset","t0","status","message","stop","crearUsuario","_req$body","NombreCompleto","CorreoElectronico","Usuario","Contrasena","_context2","body","abrupt","input","sql","VarChar","CreateNewUsser","console","log","send","getUsserBYID","id","_context3","params","getUsserById","deleteUsserById","_context4","deleteUsser","sendStatus","_context5","GetCountUsserActive","Int","ActualizarPorId"],"mappings":"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","file":"Login.controller.min.js","sourcesContent":["import {getConnection,sql, querys} from '../database/index.js';\r\n\r\nexport const getUsuarios = async (req, res) => {\r\n    try{\r\n    const pool = await getConnection();\r\n    const result = await pool.request().query(querys.getAllUsuarios);\r\n    res.json(result.recordset);\r\n    }catch (error){\r\n        res.status(500)\r\n        res.send(error.message);\r\n    }\r\n};\r\n\r\nexport const crearUsuario =  async (req, res) => {\r\n    const {NombreCompleto, CorreoElectronico, Usuario, Contrasena} = req.body;\r\n    if(NombreCompleto == null || CorreoElectronico == null || Usuario == null || Contrasena == null){\r\n        return res.status(400).json({message: 'Debe diligenciar todos los campos'});\r\n    }\r\n    try {\r\n        const pool = await getConnection();\r\n        await pool\r\n        .request()\r\n        .input('NombreCompleto',sql.VarChar, NombreCompleto)\r\n        .input('CorreoElectronico',sql.VarChar, CorreoElectronico)\r\n        .input('Usuario',sql.VarChar, Usuario)\r\n        .input('Contrasena',sql.VarChar, Contrasena)\r\n        .query(querys.CreateNewUsser)\r\n    \r\n        console.log(result)\r\n    \r\n        res.json({NombreCompleto,CorreoElectronico,Usuario});\r\n    } catch (error){\r\n        res.status(500)\r\n        res.send(error.message);\r\n    }\r\n\r\n}\r\n\r\nexport const getUsserBYID = async (req,res) => {\r\n    const {id} = req.params;\r\n    const pool = await getConnection();\r\n    const result = await pool\r\n    .request()\r\n    .input('Id', id)\r\n    .query(querys.getUsserById);\r\n    console.log(result);\r\n\r\n\r\n    res.send(result.recordset[0]);\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport const deleteUsserById = async (req,res) => {\r\n    const {id} = req.params;\r\n    const pool = await getConnection();\r\n    const result = await pool\r\n    .request()\r\n    .input('Id', id)\r\n    .query(querys.deleteUsser);\r\n    console.log(result);\r\n\r\n\r\n    res.sendStatus(204);\r\n\r\n\r\n    \r\n};\r\n\r\nexport const GetCountUsserActive = async (req,res) => {\r\n    const pool = await getConnection();\r\n    const result = await pool\r\n    .request()\r\n    .query(querys.GetCountUsserActive);\r\n    //console.log(result);\r\n    res.json(result.recordset[0]['']);   \r\n}\r\n\r\nexport const ActualizarPorId = async (req,res) => {\r\n    const {NombreCompleto, CorreoElectronico, Usuario, Contrasena} = req.body;\r\n\r\n    const {id} = req.params;\r\n    \r\n    if(NombreCompleto == null || CorreoElectronico == null || Usuario == null || Contrasena == null){\r\n        return res.status(400).json({message: 'Debe diligenciar todos los campos'});\r\n    }\r\n\r\n    const pool = await getConnection();\r\n    await pool\r\n    .request()\r\n    .input('NombreCompleto', sql.VarChar, NombreCompleto)\r\n    .input('CorreoElectronico', sql.VarChar, CorreoElectronico)\r\n    .input('Usuario', sql.VarChar, Usuario)\r\n    .input('Contrasena', sql.VarChar, Contrasena)\r\n    .input('Id', sql.Int, id)\r\n    \r\n    .query(querys.ActualizarPorId);\r\n\r\n    res.json({NombreCompleto, CorreoElectronico, Usuario, Contrasena})\r\n\r\n}"]}